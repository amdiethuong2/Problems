#include<stdio.h>
#include<string.h>
#define fi first
#define se second
#define M 55
#include<vector>
#include<algorithm>
using namespace std;
typedef pair<int,int> ii;
typedef pair<int,ii> II;
II y[M];
II x[M];
vector<int> V[5*M];
bool visited[5*M];
int match[5*M];
int N;
bool dfs(int u){
    if(visited[u]) return false;
    visited[u] = true;
    for(int i = 0 ; i < V[u].size() ; i++)
        if(match[V[u][i]] == -1) {
            match[V[u][i]] = u;
            return true;
        }
    for(int i = 0 ; i < V[u].size() ; i++)
        if(dfs(match[V[u][i]])){
            match[V[u][i]] = u ;
            return true;
        }
    return false;
}
void loadgraph(){
    scanf("%d",&N);
    int n = 0;
    for(int i=0;i<N;i++)    scanf("%d",&x[i].fi);
    for(int i=0;i<N;i++)    scanf("%d",&x[i].se.fi);
    for(int i=0;i<N;i++)    scanf("%d",&x[i].se.se);
    sort(x,x+N);
}
void assign_edge(){
    for(int i=N;i>=0;i--)
        for(int  j=i-1;j>=0;j--){
            if( i == j ) continue;
            if( x[i].fi>=x[j].fi && x[i].se.fi>=x[j].se.fi && x[i].se.se>=x[j].se.se){;
                V[3*i].push_back(3*j+2);
                V[3*i+1].push_back(3*j+2);
            }
        }
}
int max(int a,int b){
    if(a>b) return a;
    return b;
}
void solve(){
    int res = 0;
    for(int i = 0 ; i <= 4*N ; i++) match[i] = -1;
    for(int i = 0 ; i <= 4*N ; i++)
        if(dfs(i)){
            memset(visited,0,sizeof visited);
            res++;
        }
    printf("%d",N-res);
}
main(){
  //  freopen("test.inp","r",stdin);
    loadgraph();
    assign_edge();
    solve();
}
