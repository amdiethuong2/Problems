#include<stdio.h>
#define M 5000
#define NM 1000
using namespace std;
int row[M];
int m,n;
int Peak = 0;
int N;
int of_row[NM][NM];
int a[NM][NM];
int f[M];
int g[M];
int trace[M];
int of[M];
bool inside(int x,int y){
	return ( x >= 1 && x <= m && y >= 1 && y <= n);
}
void read(){
	scanf("%d %d",&m,&n);
	for(int i = 1 ; i <= m ; i++)
		for(int j = 1 ; j <= n ; j++)
			scanf("%d",&a[i][j]);
}
void cal_row(){
	for(int i = n ; i >= 1 ; i--){
		Peak++;
		int x = 1;
		int y = i;
		while(inside(x,y)){
			row[Peak]+=a[x][y];
			of_row[x][y] = Peak;
			x++;
			y++;
		}
	}
	for(int i = 2 ; i <= m ; i++){
		Peak++;
		int x = i;
		int y = 1;
		while(inside(x,y)){
			row[Peak]+=a[x][y];
			of_row[x][y] = Peak;
			x++;
			y++;
		}
	}
}
void make_seq(){
	N = 0;
	for(int i = n ; i >= 1 ; i--){
		N++;
		of[N] = of_row[1][i];
	}
	for(int i = 2 ; i <= m ; i++){
		N++;
		of[N] = of_row[i][1];
	}
	for(int i = 2 ; i <= n ; i++){
		N++;
		of[N] = of_row[m][i];
	}
	for(int i = m - 1 ; i >= 1 ; i--){
		N++;
		of[N] = of_row[i][n];
	}
}
void optimize(){
	int bound = m + n - 1;
	for(int i = N ; i >= 1 ; i--){
		f[i] = row[of[i]];
		g[i] = 1;
		for(int j = i + 1 ; j <= N ; j++){		
			if( row[of[j]] < row[of[i]]) continue;
			if ( i <= bound && j > bound && row[of[j]] == row[of[i]]) continue;
			if(f[i] < f[j] + row[of[i]]){
				f[i] = f[j] + row[of[i]];
				trace[i] = j;
				g[i] = g[j] + 1;
			}
			else if ( f[i] == f[j] + row[of[i]]){
				if( g[i] > g[j] + 1 ) {
					g[i] = g[j] + 1;
					trace[i] = j;
				}
				else if( g[i] == g[j] + 1 && of[trace[i]] > of[j])
					trace[i] = j;
			}
		}
	}
	int pos = 0;
	for(int i = 1 ; i <= N ; i++)
		if(f[i] > f[pos]) pos = i;
		else if ( f[i] == f[pos] && g[i] < g[pos]) pos = i;
		else if ( f[i] == f[pos] && g[i] == g[pos] && of[i] < of[pos]) pos = i;
	printf("%d\n%d\n",f[pos],g[pos]);
	int res = g[pos];
	for(int i = 1 ; i <= res ; i++){
		printf("%d ",of[pos]);
		pos = trace[pos];
	}
}
main(){
	read();
	cal_row();
	make_seq();
	optimize();
}
