#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
using namespace std;

#define free ichigo
#define distance nigo
#define fixed sango

const int INF = (int) 1e9;
const int N = 10000;
vector<pair<int, int> > graph[N];
int distance[N];
bool fixed[N];

int shortestPath(int start, int finish, int limit) {
    memset(distance, 0x3f, sizeof distance);
    memset(fixed, 0, sizeof fixed);
    distance[start] = 0;
    deque<int> q;
    q.push_back(start);
    while (!q.empty()) {
        int u = q.front();
        q.pop_front();
        if (fixed[u]) continue;
        fixed[u] = true;
        if (u == finish) return distance[u];
        for (int i = 0; i < (int) graph[u].size(); ++i) {
            int v = graph[u][i].first;
            int c = graph[u][i].second <= limit ? 0 : 1;
            if (distance[u] + c < distance[v]) {
                distance[v] = distance[u] + c;
                if (c == 0) q.push_front(v);
                else q.push_back(v);
            }
        }
    }
    return INF;
}

int main() {
    ios::sync_with_stdio(false);
    int n, m, free; cin >> n >> m >> free;
    for (int i = 0; i < m; ++i) {
        int u, v, c; cin >> u >> v >> c; --u; --v;
        graph[u].push_back(make_pair(v, c));
        graph[v].push_back(make_pair(u, c));
    }
    int low = 0;
    int high = INF;
    while (low < high) {
        int middle = (low + high) / 2;
        if (shortestPath(0, n - 1, middle) <= free)
            high = middle;
        else
            low = middle + 1;
    }
    printf("%d\n", low == INF ? -1 : low);
    return 0;
}
